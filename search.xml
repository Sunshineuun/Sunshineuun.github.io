<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Angular CLI 安装和使用]]></title>
    <url>%2F2018%2F01%2F19%2FAngular-CLI-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[背景介绍 关于Angular版本，Angular官方已经统一命名Angular 1.x统称为Angular JS；Angular 2.x及以上统称Angular； CLI是Command Line Interface的简写，是一种命令行接口，实现自动化开发流程，比如：ionic cli、vue cli等；它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布。 安装Angular CLI 确认是否安装node和npm 123node -v # 6.9.4npm -v # 3.10.10// node 版本高于6.9.3 npm版本高于3.0.0 设置淘宝镜像，安装node-sass 123设置环境变量set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/npm install node-sass 安装Angular CLI 1npm install @angular/cli 验证，执行ng v命令。出现下图情况则为安装成功。 基于IDEA创建第一个AngularJS想用 创建项目,Anaular CLI选项，就是刚刚安装的。 创建的过程会下载创建一些资源如下图： 使用ng server启动服务，访问端口localhost:4200]]></content>
      <tags>
        <tag>Angular CLI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis二级缓存应用第三方（Redis）]]></title>
    <url>%2F2018%2F01%2F19%2FBatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%BA%94%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%88Redis%EF%BC%89%2F</url>
    <content type="text"><![CDATA[介绍使用mybatis时可以使用二级缓存提高查询速度，进而改善用户体验。 使用redis做mybatis的二级缓存可内存可控&lt;如将单独的服务器部署出来用于二级缓存&gt;，管理方便。 使用思路 配置redis-applicationContext.xml 设置redis服务连接各参数 在配置文件中使用标签，设置开启二级 在需要使用二级h缓存的mapper.xml中使用将cache映射到指定的MybatisRedis类中 映射类MybatisRedisCache实现MyBatis包中的Cache类，并重写其中各方法； 在重写各方法体中，使用redisFactory和redis服务建立连接，将缓存的数据加载到指定的redis内存中(putObject方法)或将redis 服务中的数据从缓存中读取出来(getObject方法)； 在redis服务中写入和加载数据时需要借用spring-data-redis.jar中JdkSerializationRedisSerializer.class中的序列化(serialize) 和反序列化方法(deserialize),此为包中封装的redis默认的序列化方法； 映射类中的各方法重写完成后即可实现mybatis数据二级缓存到redis服务中 代码实践 配置redis-applicationContext.xml mybatis-config.xml配置开启二级缓存 在mapper.xml中映射缓存类MybatisRedisCache 实现MybatisRedisCache接口 使用中间类RedisCacheTransfer解决MybatisRedisCache.jedisConnectionFactory的静态注入。]]></content>
      <tags>
        <tag>Mybatis</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题之live2d，看板娘，博客宠物]]></title>
    <url>%2F2018%2F01%2F19%2Fxt%E4%B8%BB%E9%A2%98%E4%B9%8Blive2d%EF%BC%8C%E7%9C%8B%E6%9D%BF%E5%A8%98%EF%BC%8C%E5%8D%9A%E5%AE%A2%E5%AE%A0%E7%89%A9%2F</url>
    <content type="text"><![CDATA[为博客加入看板娘，宠物效果图如下： 具体实现方法 live2d插件安装1npm install -save hexo-helper-live2d 注意：需要在项目的根目录下执行哦 然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到&lt;/body&gt;之前： 1&#123;&#123; live2d() &#125;&#125; 然后在在 hexo 的 _config.yml 中添加参数： 123live2d: model: wanko bottom: -30 如果想让宠物在移动端不显示的话再主题配置文件中加入以下代码: 1234live2d: model: wanko bottom: -30 mobileShow: false 这样就配置成功了！ live2d的详细配置解释 live2d的项目地址在这里 Settings12345678910111213141516# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: model: z16 # 展示模型的代码. 默认: z16 width: 150 # 这个模型的宽度. 默认: 150 height: 300 # 这个模型的高度. default: 300 scaling: 1 # 分辨率缩放. default: 2 opacityDefault: 0.7 # 透明度. default: 0.7 opacityHover: 1 # The opacity when hover. default: 1 mobileShow: true #是否在移动设备上显示. default: true mobileScaling: 0.5 # The scaling on mobile. default: 0.5 position: right # 模型所在网页的左边还是右边. default: right horizontalOffset: 0 # 横向偏移量. default: 0 verticalOffset: -20 # 纵向偏移量. default: -20 id: live2dcanvas # live2d元素的ID. default: live2dcanvas deviceJsSource: local # 当前设备脚本的源代码. default: local 参考文献 live2d模型预览 live2d项目地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F01%2F19%2Frkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。 列表列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 -/* 就可以了，例如： 无序列表 123- 文本1- 文本2- 文本3 有序列表 1231. 文本12. 文本23. 文本3 链接使用 [显示文本](链接地址) 这样的语法即可，例如：1[百度传送门](www.baidu.com) 图片插入![](图片链接地址)，图片链接地址可以是相对路径，绝对路径，也可以是网上的资源。 引用引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 &gt; 就好了，例如：1&gt; 引用演示 粗体和斜体Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：演示语句：我是斜体，我是粗体代码如下：1*我是斜体*，**我是粗体** 代码引用字段的代码用``进行包裹，段落的代码用12##### 表格 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 ```效果如下： Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitLab之IP修改]]></title>
    <url>%2F2018%2F01%2F19%2FGitLab%E4%B9%8BIP%E4%BF%AE%E6%94%B9%2F</url>
    <content type="text"><![CDATA[问题背景虚拟机的IP地址变动了，用新的IP地址直接访问虚拟的gitlab没问题，开发者的项目上修改对应的远程地址也就可以关联上了。但是出现一个问题，如下图所示：项目的下载地址还是原有的IP地址，不是现有IP地址。基于这样的问题给出以下修改。 问题解决PS:笔者用的是ubuntu的系统 进入gitlab的配置目录 1cd /opt/gitlab/embedded/service/gitlab-rails/config 用ls命令查看目录下的文件，如下图：。目录中会包含一个gitlab.yml的文件。 打开并修改相关配置，用vi gitlab.yml命令进行打开。将图中host修改成新指定的IP即可。例如我这里就将IP修改为192.168.16.182 gitlab-ctl restart重启服务即可，效果图如下：]]></content>
      <categories>
        <category>IT</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo主题之NexT]]></title>
    <url>%2F2018%2F01%2F18%2Fxo%E6%9B%BF%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%B8%BANexT%2F</url>
    <content type="text"><![CDATA[安装 下载NexT主题，下载地址请前往这里。如下图！或者点击这里直接进行下载。 将下载下来的文件解压，放到根目录下的themes文件夹下。如下图中的next下存储的就是NexT主题。 启用主题修改./_config.yml中的theme配置theme: next 添加评论功能 前往Github创建OAuth App。传送门直接新建，前提需要已经登录了。 打开如下图： Authorization callback URL这一项填写需要谨慎，一般是自己的域名，回调用的，其他随意填写。 会生成如下内容：Client ID和Client Secret 编辑主题配置文件(_config.yml)，启用评论功能： 1234567gitment: enable: true lazy: true #用一个按钮延迟加载评论。 github_user: #Github ID github_repo: #评论存储仓库 client_id: #在上一步获取的到的 client_secret: #在上一步获取的到的 效果如下： 添加打赏功能一下代码都是被注释掉，去掉注释，并且配置对应的图片的路径，图片是支付宝，微信的收款码。123reward_comment: I&apos;m not rich, but still hold the dream.wechatpay: /images/wechatpay.jpgalipay: /images/alipay.jpg 添加查询功能Local Search 安装hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 编辑站点配置文件(_config.yml)，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件(_config.yml)，启用本地搜索功能： 123# Local searchlocal_search: enable: true 添加字数统计效果如图： 安装插件，代码如下： 1npm install hexo-wordcount --save 在主题配置文件(_config.yml)中找到post_wordcount对相关参数做以下配置。 1234post_wordcount: item_text: true wordcount: true min2read: true 添加文章访问量统计之LeanCloud 前往注册，传送门 创建一个应用 进入应用，在左侧导航栏存储中创建一个Class，注意Class的名字必须是Counter，如下图。 在左侧导航栏设置中应用Key能找到App ID和App Key这两个是要填入Hexo的配置中。 修改Hexo主题配置文件，在文件中找到类似以下代码： 123456# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: 对应App ID app_key: 对应App Key 至此配置成功 文章加密 打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 12345678910&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误！&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 插入位置参考下图： 然后向指定文章插入password: password 博文静态资源压缩 插件安装，执行以下命令 12npm install gulp -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 在项目的根目录中创建gulpfile.js文件，将这里的代码拷贝到创建的gulpfile.js文件中。 生成博文是执行 hexo g &amp;&amp; gulp 问题解决Next主题标签，分类，关于界面打开出现404的情况。1.1创建标签导航 在Hexo项目的根目录下打开CMD命令执行以下命令hexo new page &quot;tags&quot; 执行结束后，会在./source文件夹下出现一个tags文件夹里面默认有一个index.md的文件，这就是我们创建的导航栏的分类页面 对index.md进行修改代码如下，重复部分忽略：1234title: 标签date: 2018-01-18 11:20:02type: &quot;tags&quot;comments: false 1.2创建分类导航 在Hexo项目的根目录下打开CMD命令执行以下命令hexo new page &quot;categories&quot; 执行结束后，会在./source文件夹下出现一个categories文件夹里面默认有一个index.md的文件，这就是我们创建的导航栏的分类页面 对index.md进行修改代码如下，重复部分忽略：1234title: 分类date: 2018-01-18 11:20:02type: &quot;categories&quot;comments: false 1.3创建关于导航 在Hexo项目的根目录下打开CMD命令执行以下命令hexo new page &quot;about&quot; 执行结束后，会在./source文件夹下出现一个about文件夹里面默认有一个index.md的文件，这就是我们创建的导航栏的分类页面 对index.md进行修改代码如下，重复部分忽略：1234title: 关于date: 2018-01-18 11:20:02type: &quot;about&quot;comments: false 参考文献 NexT官方 NexT第三方服务集成 个性化配置参考]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>NexT优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo搭建个人博客]]></title>
    <url>%2F2018%2F01%2F17%2FGitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1.拥有一个GitHub账号前往以下地址进行申请 2.创建博客仓库2.1 New respository 2.2 填写信息 标注【1】处填写github_username.github.io。 github_username用自己的用户名称代替。 点击【Create repository】创建仓库。至此github的仓库创建好了。 3.安装Hexo3.1安装Node.js Node.js官方下载地址，并且配置环境变量。 Windows环境变量配置,目前没有编写博客，后续补充。 Liunx环境变量配置,目前没有编写博客，后续补充。3.2设置npm淘宝镜像站点 npm默认源的下载速度可能很慢，建议使用淘宝镜像替换。 执行下面命令，将npm的源设置成淘宝镜像站点npm config set registry &quot;https://registry.npm.taobao.org&quot; 配置Node.js的环境变量 3.2安装Hexo 执行一下命令安装Hexo，Hexo是安装在shell打开的当前路径下的npm install hexo-cli g 初始化博客，初始化的博客是在shell打开的当前路径下创建目录hexo init blog 进入blog的主目录中cd blog 安装Hexo扩展插件npm install 安装其它插件12345678910npm install hexo-server --save# 可视化博客编辑插件npm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --save# git发布插件npm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save 至此安装完毕！！！ 4.Hexo基本使用4.1启用Hexo服务 静态页面生成hexo generate 启动本地服务hexo server 打开浏览器，地址栏中输入：[http://localhost:4000 ],应该可以看见刚刚创建的博客了 4.2问题答疑 如果出现无法访问的情况，可能是4000这个端口被占用了。解决方式，关闭服务，修改端口，再次启动服务器。相关代码如下1234# 修改端口hexo s -p 5000# 关闭服务Ctrl+C 5.将Hexo博客部署到GitHub上5.1配置 修改配置文件blog/_config.yml，修改deploy项的内容，如下所示： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 类型 type: git # 仓库的地址 repo: https://github.com/Sunshineuun/Sunshineuun.github.io.git # 分支 branch: master 注意：yml的语法要求各个标签【:】分号必须有空格。 注意：repo是对应仓库的地址，在hexo deploy的时候会提示输入密码。 5.2部署 执行以下命令： 123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy 打开网页，输入http://github_username.github.io ，打开github上托管的博客。如我的博客地址是：http://Sunshineuun.github.io。 参考文献 Hexo官网 NexT官网]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo可视化编辑]]></title>
    <url>%2F2018%2F01%2F17%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[后端管理插件hexo-admin1插件可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里，提供标签，分类配置。 1.安装123456# 安装插件npm install --save hexo-admin# 启动服务hexo server -d# 登陆地址open http://localhost:4000/admin/ 登陆查看即可]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
