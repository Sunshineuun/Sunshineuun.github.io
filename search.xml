<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MongoDB]]></title>
    <url>%2F2018%2F03%2F18%2FongoDB%2F</url>
    <content type="text"><![CDATA[更新命令update格式如下：1db.collection.update(criteria,objNew,upsert,multi) 参数说明如下：criteria：查询条件objNew：update对象和一些更新操作符upsert：如果不存在update的记录，是否插入objNew这个新的文档，true为插入，默认为false，不插入。multi：默认是false，只更新找到的第一条记录。如果为true，把按条件查询出来的记录全部更新。 save格式如下：1db.collection.save(obj) 参数说明如下：obj：代表需要更新的对象，如果集合内部已经存在一个和obj相同的_id的记录，Mongodb会把obj对象替换集合内已存在的记录，如果不存在，则会插入obj对象。 更新操作符号$inc用法：{$inc:{field:value}}作用：对一个数字字段的某个field增加value说明：只能运用在数值类型上 $set用法：{$set:{field:value}}作用：把文档中某个字段field的值设为value $unset用法：{$unset:{field:1}}作用：删除某个字段field $push用法：{$push:{field:value}}作用：把value追加到field里。说明：field只能是数组类型，如果field不存在，会自动插入一个数组类型 pushAll用法：{$pushAll:{field:value_array}}作用：用法同$push一样，只是$pushAll可以一次追加多个值到一个数组字段内。说明：field只能是数组类型。 $addToSet用法：{$addToSet:{field:value}}作用：加一个值到数组内，而且只有当这个值在数组中不存在时才增加。说明：结果是append，不是add，就算存入的是数组，它也是单个值举例：存入[ “A3”, “A4” ]的效果1[ &quot;Michael&quot;, &quot;A1&quot;, &quot;A2&quot;, [ &quot;A3&quot;, &quot;A4&quot; ] ] $pop用法：删除数组内第一个值：{$pop:{field:-1}}、删除数组内最后一个值：{$pop:{field:1}}作用：用于删除数组内的一个值 $pull用法：{$pull:{field:_value}}作用：从数组field内删除一个等于_value的值 $pullAll用法：{$pullAll:value_array}作用：用法同$pull一样，可以一次性删除数组内的多个值。 $rename用法：{$rename:{old_field_name:new_field_name}}作用：对字段进行重命名 参考资料 快速入门 博客-更新命令(save,update)]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端开发知识要点]]></title>
    <url>%2F2018%2F03%2F18%2F%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9%2F</url>
    <content type="text"><![CDATA[基础篇基本功面向对象的特征 抽象 抽象使我们更接近于事物的本质。抽象的过程就是一个提炼存在于事物之间共同拥有的元素，而这些事务之间共同拥有的元素往往是这一事物区别于其他事物关键的东西，这些元素就构成了事物的本质. 继承 既是拓展的过程，也是归类的过程。 封装 私有化的一个过程。 多态性 多种表达形式。 final, finally, finalize 的区别 final，修饰变量，常量；修饰Class，不运行被继承；修饰方法，拒绝重载；总之就是只能这样了的意思。 finally，抛出异常继续执行的代码块。 finalize，是一个清理方法。 int 和 Integer 有什么区别int是基础类型，Integer是int的包装类；Integer是一个对象。 重载和重写的区别 重载同一方法名称，但是不同参数，已达到多态的效果。 重写，也称覆盖，覆盖父类的方法。 抽象类和接口有什么区别 个人理解：抽象类有具体方法实现；接口中的方法，都是由继承类实现。 接口是对动作的抽象，而抽象类是对根源的抽象。 接口和抽象类都是继承树的上层，他们的共同点如下： 1.1 都是上层的抽象层。1.2 都不能被实例化1.3 都能包含抽象的方法，这些抽象的方法用于描述类具备的功能，但是不比提供具体的实现。 它们的区别如下： 2.1 在抽象类中可以写非抽象的方法，从而避免在子类中重复书写它们，这样可以提高代码的复用性，这是抽象类的优势；接口中只能有抽象的方法。2.2 一个类只能继承一个直接父类，这个父类可以是具体的类也可是抽象类；但是一个类可以实现多个接口。 参考：知乎-接口和抽象类有什么区别？ 说说反射的用途及实现用途：获取当前对象几乎所有的信息，属性，方法，注解等。参考：反射理解基础 说说自定义注解的场景及实现HTTP 请求的 GET 与 POST 方式的区别session 与 cookie 区别session 分布式处理JDBC 流程MVC 设计思想equals 与 == 的区别]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB]]></title>
    <url>%2F2018%2F03%2F12%2FgoDB%2F</url>
    <content type="text"><![CDATA[更新命令update格式如下：1db.collection.update(criteria,objNew,upsert,multi) 参数说明如下：criteria：查询条件objNew：update对象和一些更新操作符upsert：如果不存在update的记录，是否插入objNew这个新的文档，true为插入，默认为false，不插入。multi：默认是false，只更新找到的第一条记录。如果为true，把按条件查询出来的记录全部更新。 save格式如下：1db.collection.save(obj) 参数说明如下：obj：代表需要更新的对象，如果集合内部已经存在一个和obj相同的_id的记录，Mongodb会把obj对象替换集合内已存在的记录，如果不存在，则会插入obj对象。 更新操作符号$inc用法：{$inc:{field:value}}作用：对一个数字字段的某个field增加value说明：只能运用在数值类型上 $set用法：{$set:{field:value}}作用：把文档中某个字段field的值设为value $unset用法：{$unset:{field:1}}作用：删除某个字段field $push用法：{$push:{field:value}}作用：把value追加到field里。说明：field只能是数组类型，如果field不存在，会自动插入一个数组类型 pushAll用法：{$pushAll:{field:value_array}}作用：用法同$push一样，只是$pushAll可以一次追加多个值到一个数组字段内。说明：field只能是数组类型。 $addToSet用法：{$addToSet:{field:value}}作用：加一个值到数组内，而且只有当这个值在数组中不存在时才增加。说明：结果是append，不是add，就算存入的是数组，它也是单个值举例：存入[ “A3”, “A4” ]的效果1[ &quot;Michael&quot;, &quot;A1&quot;, &quot;A2&quot;, [ &quot;A3&quot;, &quot;A4&quot; ] ] $pop用法：删除数组内第一个值：{$pop:{field:-1}}、删除数组内最后一个值：{$pop:{field:1}}作用：用于删除数组内的一个值 $pull用法：{$pull:{field:_value}}作用：从数组field内删除一个等于_value的值 $pullAll用法：{$pullAll:value_array}作用：用法同$pull一样，可以一次性删除数组内的多个值。 $rename用法：{$rename:{old_field_name:new_field_name}}作用：对字段进行重命名 参考资料 快速入门 博客-更新命令(save,update)]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python常用命令]]></title>
    <url>%2F2018%2F03%2F08%2Fython%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[python查看所有module api文档1python -m pydoc -p 4895]]></content>
  </entry>
  <entry>
    <title><![CDATA[个人报销]]></title>
    <url>%2F2018%2F03%2F06%2F%E4%BA%BA%E6%8A%A5%E9%94%80%2F</url>
    <content type="text"><![CDATA[交通费12323+73+92+15+51+45+50+35+32+18+81+124+38+55+130+40+99=1001164+87+294+197+18+44+22+40+18+14+14+14+47+27=1000224+19+35+19+59+69+32+110+24+17+29+43+17+21+27+46+27+39=800多]]></content>
  </entry>
  <entry>
    <title><![CDATA[MongoDB注册为windows服务]]></title>
    <url>%2F2018%2F03%2F05%2FngoDB%E6%B3%A8%E5%86%8Cwindows%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[以系统管理员身份打开“运行”窗口，输入cmd 回车，并切换至MongoDB的bin目录运行以下语句。 语句为： mongod.exe –dbpath=D:\install\MongoDB\data –logpath=D:\install\MongoDB\log\mongodb.log –install –serviceName “MongoDB” PS:惊讶–pbpath指的的mongodb安装路径，logpath指的是mongodb日志存放路径，–install –serviceName指的是安装成为系统服务，服务名称为 MongoDB]]></content>
  </entry>
  <entry>
    <title><![CDATA[Selenium浏览器滚动条操作]]></title>
    <url>%2F2018%2F03%2F05%2Flenium%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[通过driver.execute_script()执行js代码进行操作。 滚动到底部window.scrollTo(0, document.body.scrollHeight)PS:其实就是通过window.scrollTo()进行处理的，第一个参数是横向向参数，第二个参数是纵向参数。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Winning-Tech-3月]]></title>
    <url>%2F2018%2F03%2F02%2Fnning-Tech%2F</url>
    <content type="text"><![CDATA[2018年3月 公司计划12345root = /Winning/2018/3月份TASK1 - 部门经理分配的任务，【root/各主体资料库进度总览.xlsx】文档中，待爬取网站爬取可行性分析。TASK2 - 产品经理分配的任务，中药方剂库数据爬取。【root/中药方剂库-产品.xlsx】TASK3 - 产品迭代任务，2.8版本需求评估，开发。TASK4 - 数据挖掘组分配的任务，药品说明书网站数据爬取。目前只提供了一个网站，后续补充。 个人计划1234561.react学习2.springboot学习3.前后端分离学习4.python爬虫进阶5.java、javaweb基础巩固6.servlet学习 2018年3月2日12341. 中药方剂库数据爬取分析及其计划评估。TASK22. KBMS bug修复，【社保药品分类与代码】查询后，树无限展开问题处理。3. KBMS2.8版本需求分析及其评估。TASK34. 分析数据挖掘组需要爬取的网站。TASK1 2018年3月5日11. 分析爬取网站的可行性。TASK1]]></content>
      <categories>
        <category>Winning</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle日常错误]]></title>
    <url>%2F2018%2F03%2F01%2FOracle%E6%97%A5%E5%B8%B8%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[在实际的 LONG 或 LOB 列之后提供了扩展的非 LONG 绑定数据 1在INSERT操作的时候，需要将LONG或者LOB类型的列放到其他类型的后面，否则出错 ORA-01461: 仅能绑定要插入 LONG 列的 LONG 值 1字段插入类型超过了VARCHAR2(4000),需要调整为CLOB类型。]]></content>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java错误日志_01]]></title>
    <url>%2F2018%2F02%2F07%2Fva%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97-01%2F</url>
    <content type="text"><![CDATA[背景描述在终端运行java -jar xxx.jar的时候。在终端运行可执行jar，jar包中带main方法。 错误信息如下123456789101112131415161718192021Error: A JNI error has occurred, please check your installation and try againException in thread &quot;main&quot; java.lang.SecurityException: Invalid signature file digest for Manifest main attributes at sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:284) at sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:238) at java.util.jar.JarVerifier.processEntry(JarVerifier.java:316) at java.util.jar.JarVerifier.update(JarVerifier.java:228) at java.util.jar.JarFile.initializeVerifier(JarFile.java:383) at java.util.jar.JarFile.getInputStream(JarFile.java:450) at sun.misc.URLClassPath$JarLoader$2.getInputStream(URLClassPath.java:940) at sun.misc.Resource.cachedInputStream(Resource.java:77) at sun.misc.Resource.getByteBuffer(Resource.java:160) at java.net.URLClassLoader.defineClass(URLClassLoader.java:454) at java.net.URLClassLoader.access$100(URLClassLoader.java:73) at java.net.URLClassLoader$1.run(URLClassLoader.java:368) at java.net.URLClassLoader$1.run(URLClassLoader.java:362) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:361) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495) 解决方式删除对应目录下的三类文件META-INF/*.RSA;META-INF/*.DSA;META-INF/*.SF即可。 参考文献 1]]></content>
  </entry>
  <entry>
    <title><![CDATA[Jrebel破解大法]]></title>
    <url>%2F2018%2F02%2F07%2Febel%E7%A0%B4%E8%A7%A3%E5%A4%A7%E6%B3%95%2F</url>
    <content type="text"><![CDATA[使用License Server进行破解搭建License Server服务 工具下载，百度网盘传送门,密码zmzk 将项目导入IDEA中，运行起来，或者打成jar进行运行。提示如下。对于端口冲突的话，修改端口会在后面提到。 然后到IDEA中激活Jrebel。 至此应该破解成功了。 端口修改 参考文献 Jrebel 热部署 最新版破解 ！！监听端口实现 免费！转载博客于此]]></content>
  </entry>
  <entry>
    <title><![CDATA[React基础一]]></title>
    <url>%2F2018%2F02%2F02%2FReact%E5%9F%BA%E7%A1%80%E4%B8%80%2F</url>
    <content type="text"><![CDATA[项目创建1234npm install -g create-react-app /* 安装create-react-app，建议使用cnpm */create-react-app myapp /* 使用命令创建应用，myapp为项目名称 */cd myapp /* 进入目录，然后启动 */npm start 项目结构生成项目后，脚手架为了“优雅”… …隐藏了所有的webpack相关的配置文件，此时查看myapp文件夹目录，会发现找不到任何webpack配置文件。执行以下命令：1npm run eject webpack3构建react工程安装webpack1npm install --save-dev webpack 参考文献 Create-React-App创建antd-mobile开发环境 使用babel-plugin-import实现antd组件库中的组件按需加载 babel-plugin-import github webpack3构建react工程]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发戒律]]></title>
    <url>%2F2018%2F02%2F01%2F%E5%BC%80%E5%8F%91%E6%88%92%E5%BE%8B%2F</url>
    <content type="text"><![CDATA[2018年2月1日16:04:51 sql执行一定要使用绑定参数，不然出现以下特殊字符就出错。【’ ,】，英文的引号，逗号的。]]></content>
      <tags>
        <tag>告诫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security日常问题]]></title>
    <url>%2F2018%2F02%2F01%2FSpring-Security%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[页面获取Spring Security登录用户简介： spring security 把SPRING_SECURITY_CONTEXT 放入了session 没有直接把username 放进去。 前台取值方式一: 1$&#123;session.SPRING_SECURITY_CONTEXT.authentication.principal.username&#125; 前台取值方式二: 在页面端用tag获取 12&lt;%@ taglib prefix=&apos;security&apos; uri=&apos;http://www.springframework.org/security/tags&apos;%&gt; &lt;security:authentication property=&quot;principal.username&quot;&gt;&lt;/security:authentication&gt; 或者123&lt;security:authorize ifAllGranted=&quot;ROLE_ADMIN&quot;&gt; &lt;security:authentication property=&quot;principal.username&quot;&gt;&lt;/security:authentication&gt; &lt;/security:authorize&gt; 后台取值:12345UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext() .getAuthentication() .getPrincipal(); userDetails.getUsername()]]></content>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDC书单]]></title>
    <url>%2F2018%2F02%2F01%2FTDC%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[公告《分布式Java应用：基础与实践》书本找回，谁借用这本书，未告知管理员的，请及时告知。感谢。 为了保证资源能够充分利用，在书闲置之时，请各位及时还书。可以在下方留言，邮箱，扣扣等方式告知，到我这里拿钥匙，或者我可以给你送过去。感谢合作！ 联系人：邱胜明 手机号码：15958624595 QQ：583853240 邮箱：qiushengming@tech-winning.com 书名 作者 借书日期 还书日期 借书人 京东系统质量保障技术实战 商城研发POP平台 著 MongoDB实战（第二版） 华中科技大学出版社 Java多线程编程核心技术 高洪岩 精通自动化测试框架设计 陈冬严 2018/1/31 2018/2/22 陈进美 Web接口开发与自动化测试――基于Python语言 虫师 2018/2/1 - 陈俊杰 Selenium2自动化测试实战基于Python语言 虫师 Python核心编程（第3版） [美]WesleyChun著；孙波翔，李斌，李晗译 2018/1/31 2018/2/28 吴维维 Docker经典实例 [美]戈阿冈（SébastienGoasguen）著；刘斌译 2018/1/31 2018/2/28 吴维维 深入浅出Node.js 朴灵 2018/2/1 范健伟 Spring源码深度解析 郝佳 2018/2/1 - 杨浩 大型网站系统与Java中间件实践 曾宪杰 分布式Java应用：基础与实践 林昊 深度学习入门之PyTorch 廖星宇 TensorFlow：实战Google深度学习框架 才云科技Caicloud，郑泽宇，顾思宇著 TensorFlow技术解析与实战 李嘉璇 Redis开发与运维 付磊 2018/2/1 2018/4/20 于祥通 分布式服务框架原理与实践 李林锋 2018/2/1 2018/4/20 于祥通 Java性能权威指南 奥克斯 2018/2/1 2018/4/20 于祥通 Redis开发与运维 付磊，张益军著 分布式服务架构：原理、设计与实战 李艳鹏，杨彪著 2018/2/1 2018/4/28 田升 WebAPI的设计与开发 水野贵明著；盛荣译 2018/2/1 2018/3/15 万玉 看透SpringMVC:源代码分析与实践 韩路彪著 2018/2/1 2018/3/1 尚梦思 HTML5+CSS3+JavaScript从入门到精通（标准版 未来科技著 程序员的修炼——从优秀到卓越 [美]Jeff,Atwood著 Oracle性能诊断艺术（第2版） [瑞士]ChristianAntognini著；王作佳，刘迪译 2018/2/1 - 许林峰 高性能MySQL（第3版） BaronSchwartzPeterZaitsevVadimTkachenko著；宁海元，周振兴，彭立勋等译 疯狂SpringCloud微服务架构实战 作者：杨恩雄 2018/2/1 2018/2/25 李赏 Node.js微服务 DavidGonzalez著赵震一郑伟杰译 2018/2/1 - 范建伟]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mybatis Generator配置详解]]></title>
    <url>%2F2018%2F01%2F31%2FMybatis-Generator%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Mybatis Generator配置详解简介使用这个插件可以快速生成一些代码,包含实体类/Mapper接口/*Mapper.xml文件。笔者用IDEA开发环境，利用MAVEN进行构建。参考官方文档点击传送门前往。 POM文件配置如下注意,plugins标签是build标签的子标签1234567891011121314151617181920212223242526272829&lt;plugins&gt; &lt;plugin&gt; &lt;!--Mybatis-generator插件,用于自动生成Mapper和POJO--&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;!--配置文件的位置--&gt; &lt;configurationFile&gt;yourLocation/mybatis-generator-config.xml&lt;/configurationFile&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt; Mybatis Generator配置如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;!-- 配置生成器 --&gt;&lt;generatorConfiguration&gt;&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项 resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties. 注意，两个属性只能选址一个; 另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用&lt;properties resource=&quot;&quot; url=&quot;&quot; /&gt; --&gt; &lt;!-- 在MBG工作的时候，需要额外加载的依赖包 location属性指明加载jar/zip包的全路径&lt;classPathEntry location=&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot; /&gt; --&gt;&lt;!-- context:生成一组对象的环境 id:必选，上下文id，用于在生成错误时提示 defaultModelType:指定生成对象的样式 1，conditional：类似hierarchical； 2，flat：所有内容（主键，blob）等全部生成在一个对象中； 3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class) targetRuntime: 1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample； 2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample； introspectedColumnImpl：类全限定名，用于扩展MBG--&gt;&lt;context id=&quot;mysql&quot; defaultModelType=&quot;hierarchical&quot; targetRuntime=&quot;MyBatis3Simple&quot; &gt; &lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 --&gt; &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;false&quot;/&gt; &lt;!-- 生成的Java文件的编码 --&gt; &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt; &lt;!-- 格式化java代码 --&gt; &lt;property name=&quot;javaFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt; &lt;!-- 格式化XML代码 --&gt; &lt;property name=&quot;xmlFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt; &lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt; &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt; &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt; &lt;!-- 必须要有的，使用这个配置链接数据库 @TODO:是否可以扩展 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql:///pss&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt; &lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt; &lt;/jdbcConnection&gt; &lt;!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； --&gt; &lt;javaTypeResolver type=&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;&gt; &lt;!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale&gt;0;length&gt;18：使用BigDecimal; scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length&lt;5：使用Short； --&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- java模型创建器，是必须要的元素 负责：1，key类（见context的defaultModelType）；2，java类；3，查询类 targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制； targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 --&gt; &lt;javaModelGenerator targetPackage=&quot;com._520it.mybatis.domain&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； --&gt; &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt; &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 --&gt; &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt; &lt;!-- 设置一个根对象， 如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项 注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括： 1，属性名相同，类型相同，有相同的getter/setter方法； --&gt; &lt;property name=&quot;rootClass&quot; value=&quot;com._520it.mybatis.domain.BaseDomain&quot;/&gt; &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口）， 或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 targetPackage/targetProject:同javaModelGenerator --&gt; &lt;sqlMapGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; targetProject=&quot;src/main/resources&quot;&gt; &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER --&gt; &lt;javaClientGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; type=&quot;ANNOTATEDMAPPER&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt; --&gt; &lt;/javaClientGenerator&gt; &lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素 选择的table会生成一下文件： 1，SQL map文件 2，生成一个主键类； 3，除了BLOB和主键的其他字段的类； 4，包含BLOB的类； 5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选； 6，Mapper接口（可选） tableName（必要）：要生成对象的表名； 注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会 根据设置的schema，catalog或tablename去查询数据表，按照下面的流程： 1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询； 2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找； 3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找； 4，否则，使用指定的大小写格式查询； 另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名； 这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式； 可选： 1，schema：数据库的schema； 2，catalog：数据库的catalog； 3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName 4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面； 5，enableInsert（默认true）：指定是否生成insert语句； 6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）； 7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句； 8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)； 9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）； 10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句； 11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）； 12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）； 13，modelType：参考context元素的defaultModelType，相当于覆盖； 14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性） 15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性 注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写； --&gt; &lt;table tableName=&quot;userinfo&quot; &gt; &lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt; &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt; &lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt; &lt;property name=&quot;ignoreQualifiersAtRuntime&quot; value=&quot;false&quot;/&gt; &lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt; &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt; &lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt; &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt; &lt;!-- 参考 javaModelGenerator 的 rootClass 属性 &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 参考javaClientGenerator 的 rootInterface 属性 &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 注意，该属性只针对MyBatis3Simple有用； 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件； --&gt; &lt;property name=&quot;selectAllOrderByClause&quot; value=&quot;age desc,username asc&quot;/&gt; &lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt; &lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot;/&gt; &lt;!-- generatedKey用于生成生成主键的方法， 如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选 column:主键的列名； sqlStatement：要生成的selectKey语句，有以下可选项： Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() DB2 :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() DB2_MF :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1 Derby :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL() HSQLDB :相当于selectKey的SQL为：CALL IDENTITY() Informix :相当于selectKey的SQL为：select dbinfo(&apos;sqlca.sqlerrd1&apos;) from systables where tabid=1 MySql :相当于selectKey的SQL为：SELECT LAST_INSERT_ID() SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY() SYBASE :相当于selectKey的SQL为：SELECT @@IDENTITY JDBC :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性 &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt; --&gt; &lt;!-- 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候， 比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等； 那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是 custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email； 注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的， 如果使用了columnOverride元素，该属性无效； &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt; --&gt; &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性； column:要重新设置的列名； 注意，一个table元素中可以有多个columnOverride元素哈~ --&gt; &lt;columnOverride column=&quot;username&quot;&gt; &lt;!-- 使用property属性来指定列要生成的属性名称 --&gt; &lt;property name=&quot;property&quot; value=&quot;userName&quot;/&gt; &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名 &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- jdbcType用于指定该列的JDBC类型 &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述 &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; --&gt; &lt;!-- 参考table元素的delimitAllColumns配置，默认为false &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt; --&gt; &lt;/columnOverride&gt; &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 column:指定要忽略的列的名字； delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false 注意，一个table元素中可以有多个ignoreColumn元素 &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt; --&gt; &lt;/table&gt;&lt;/context&gt;&lt;/generatorConfiguration&gt;]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[火狐浏览器打开新页签不断刷新]]></title>
    <url>%2F2018%2F01%2F30%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%96%B0%E9%A1%B5%E7%AD%BE%E4%B8%8D%E6%96%AD%E5%88%B7%E6%96%B0%2F</url>
    <content type="text"><![CDATA[原因用旧版本覆盖了新版本的火狐，导致新标签页数据损坏。 解决方案地址栏输入about:support根据提示打开配置文件夹，删除storage文件夹、及其已storage为名的文件并且重启火狐。笔者亲测有效。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Oracle数值类型主键自增长]]></title>
    <url>%2F2018%2F01%2F29%2FOracle%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E9%95%BF%2F</url>
    <content type="text"><![CDATA[创建表 123456 CREATE TABLE K_USER ( ID NUMBER PRIMARY KEY, USER_NAME VARCHAR(45) NOT NULL, pd VARCHAR(45) NOT NULL, ENABLED NUMBER DEFAULT 1 NOT NULL); 创建自增序列 123456CREATE SEQUENCE K_USER_ID_AUTOINC -- 序列的名称 MINVALUE 1 -- 最小值 MAXVALUE 99999999 -- 最大值 START WITH 1 -- 从多少开始 INCREMENT BY 1 -- 每次序列加多少 NOCACHE; 创建序列 123456CREATE OR REPLACE TRIGGER K_USER_ID_TRIGGER -- 监听的名称 BEFORE INSERT ON K_USER FOR EACH ROW WHEN (new.ID IS NULL) -- 在插入循环ID为空的列 BEGIN SELECT K_USER_ID_AUTOINC.nextval INTO :new.id FROM dual; END;]]></content>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu常用操作命令]]></title>
    <url>%2F2018%2F01%2F26%2Funtu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[文件操作文件进入 cd 路径; cd ..; 返回上一个文件夹 sudo; 获取root权限，需要输入root权限的密码。 文件创建 mkdir 名称; 新建一个文件夹 touch 名称; 新建一个空文件。 文件删除 rmdir 目录名; 删除一个空的文件夹(目录) rm -rf 目录名; 删除一个非空的文件夹(目录) rm 文件名,文件名; 删除多个文件 文件复制 cp 文件名 目标路径; 拷贝文件到目标路径下 cp -i; 拷贝，同名文件存在时，输出[yes/no]的询问 cp -f; 强制复制文件,如果同名不询问 文件剪切 mv jdk1.8.0_20/ /usr/lib/jvm///；可剪切文件目录 常用解压，安装，文件更新 tar -zxvf *.tar.gz 解压tar.gz格式的文件 source *.install 安装install格式的安装包 sh 路径/x.sh 安装sh格式的文件 apt-get upgrade 更新已安装的包 apt-get update 更新源 服务 netstat -nltp 查看启动的进程 kill -9 pid，参数-9强制杀进程，参数pid对应的进程pid。 内存查询命令free命令 功能说明: 显示内存状态。 语法: free [-bkmotV][-s ]。 补充说明: free指令会显示内存的使用情况，包括实体内存，虚拟的交换文档内存，共享内存区段，连同系统核心使用的缓冲区等。 参数： 1. -b 以Byte为单位显示内存使用情况。 2. -k 以KB为单位显示内存使用情况。 3. -m 以MB为单位显示内存使用情况。 4. -o 不显示缓冲区调节列。 5. -s 持续观察内存使用状况。 6. -t 显示内存总和列。 7. -V 显示版本信息。 开关机操作 reboot 重启 shutdown -r now; 立即重启，需root权限 shutdown -r 10,;10分钟后自动重启，时间自由调整，单位分，需root权限 halt立即关机 poweroff立刻关机 shutdown -h now立刻关机 shutdown -h 10;10分钟后自动关机，时间自由调整，单位分，需root权限 shutdown -c;取消关机重启 其他Ubuntu实时查看tomcat运行log 找到tomcat安装目录：cd tomcat/logs tail -f catalina.out ctrl+c 退出]]></content>
  </entry>
  <entry>
    <title><![CDATA[Jenkins Install]]></title>
    <url>%2F2018%2F01%2F26%2FJenkins-Install%2F</url>
    <content type="text"><![CDATA[简介Jenkins自动化部署打包系统，百度百科传送门笔者安装在Ubuntu环境上。 Jenkins Install传送门 Jenkins UnInstall传送门 Git Install执行以下命令1apt-get install git Maven Install 下载Maven的安装包 安装命令如下12345678# 解压tar zxvf apache-maven-3.3.9.bin.tar.gz# 增加环境变量vi /etc/profile# 在打开文件尾部增加以下内容M2_HOME=/usr/local/apache-maven-3.3.9 # 此路径是你maven解压缩文件的路径。PATH=$M2_HOME/bin:$PATH]]></content>
      <tags>
        <tag>JenKins</tag>
        <tag>自动化构建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven打包问题]]></title>
    <url>%2F2018%2F01%2F26%2FMaven%E6%89%93%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Maven所有的打包都是依赖Maven仓库的，并不依赖项目。 每个Maven都需要依赖到具体的项目。 关于Mavenparent的节点需要学习。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot使用Druid数据源]]></title>
    <url>%2F2018%2F01%2F24%2Fpring-Boot%E4%BD%BF%E7%94%A8Druid%E6%95%B0%E6%8D%AE%E6%BA%90%2F</url>
    <content type="text"><![CDATA[添加pom文件依赖数据库驱动的jar，视你用的是什么数据库添加对应pom依赖。我这里用oracle数据库所以就添加oracle的依赖。123456789101112&lt;!-- alibaba的druid数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.oracle/ojdbc14 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt; &lt;version&gt;10.2.0.4.0&lt;/version&gt;&lt;/dependency&gt; 配置yml文件中druid数据库连接池12345678910111213141516171819202122232425262728293031323334353637spring: datasource: name: test username: root password: root url: jdbc:oracle:thin:@192.168.16.113:1521:sunshine driver-class-name: oracle.jdbc.driver.OracleDriver # 数据库驱动配置 type: com.alibaba.druid.pool.DruidDataSource # aliyun数据连接池配置 druid: username: root password: root # 初始化连接数 initial-size: 1 # 最小连接数 min-idle: 3 # 最大连接数 max-active: 20 # 配置获取连接等待超时的时间 max-wait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 time-between-eviction-runs-millis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 min-evictable-idle-time-millis: 30000 validation-query: select&apos;x&apos; test-while-idle: true test-on-borrow: false test-on-return: false # 打开PSCache，并且指定每个连接上PSCache的大小 pool-prepared-statements: true max-pool-prepared-statement-per-connection-size: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙 filters: stat,wall,slf4j # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true 配置Druid的监控统计功能 @Confing注解 配置类，代码见DruidConfiguration.java 基于注解首先在启动类上加上注解：@ServletComponentScan使Spring能够扫描到我们自己编写的servlet和filter。1234567891011121314151617181920212223242526272829//druid数据源状态监控.@WebServlet(urlPatterns = &quot;/druid/*&quot;, initParams = &#123; // IP白名单 (没有配置或者为空，则允许所有访问) @WebInitParam(name = &quot;allow&quot;, value = &quot;192.168.1.72,127.0.0.1&quot;), // IP黑名单 (存在共同时，deny优先于allow) @WebInitParam(name = &quot;deny&quot;, value = &quot;192.168.1.73&quot;), // 用户名 @WebInitParam(name = &quot;loginUsername&quot;, value = &quot;admin&quot;), // 密码 @WebInitParam(name = &quot;loginPassword&quot;, value = &quot;admin&quot;), // 禁用HTML页面上的“Reset All”功能 @WebInitParam(name = &quot;resetEnable&quot;, value = &quot;false&quot;) &#125;)public class DruidStatViewServlet extends StatViewServlet &#123;&#125;// druid过滤器. @WebFilter(filterName = &quot;druidWebStatFilter&quot;, urlPatterns = &quot;/*&quot;, initParams = &#123; // 忽略资源 @WebInitParam(name = &quot;exclusions&quot;, value=&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;) &#125;)public class DruidStatFilter extends WebStatFilter &#123;&#125; 效果如下： 参考文献Spring Boot 使用 Druid 数据库连接池Druid的官方地址JDBC连接池、监控组件 Druid 问题(*) property for user to setup查看数据源的时候出现(*) property for user to setup错误信息。原因未初始化数据源。详情传送门但是笔者的解决方案，多点几下数据源按钮，就能显示出数据了，感觉这个界面还是有问题的，目前将就着用，不受影响。]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven配置阿里云镜像库]]></title>
    <url>%2F2018%2F01%2F24%2FMaven%E4%BD%BF%E7%94%A8Aliyun%E9%95%9C%E5%83%8F%E5%BA%93%2F</url>
    <content type="text"><![CDATA[在profile &gt; repositories节点下增加阿里的镜像库 代码如下1234&lt;repository&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;&lt;/repository&gt;]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring boot项目创建]]></title>
    <url>%2F2018%2F01%2F24%2Fring-boot%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[使用IDEA创建项目 New Project，选择Spring Initializr，Next，Next 选择相关集成的JAR包 Core 工具名称 说明 参考地址 DevTools 热部署 详情前往 Security 权限控制 - Lombok 代码模板，省略了get/set的方法，IDEA中有Lombok的插件 - Configration Processor - - Session 分布式Session共享 - Cache 缓存，具体位置 详情前往 Validation 后端的数据校验 - Retry spring熔断机制 - JTA 分布式事务处理，Atomikos,Bitronix,Narayana - Aspects AOP处理 - Web 工具名称 说明 参考地址 Web - - Rest Repositories - - Rest Repositories HAL Browser - - HATEOAS - - Web Services - - Jersey JAX-RS - - Websocket - - REST Docs - - Vaadin - - Apache CXF - - Ratpack - - Mobile - - Keycloak - - Template Engines 工具名称 说明 参考地址 Yhymeleaf - - Freemarker - - Mustache - - Groovy Templates - - SQL 工具名称 说明 参考地址 JPA - - MySql - - H2 - - JDBC - - Mybatis - - PostgreSQL - - SQL Server - - HSQLDB - - Apache Derby - - Liquibase - - Flyway - - JOOQ - - NoSQL 工具名称 说明 参考地址 Redis - - MongoDB - - Reactive Redis - - Reactive MongoDB - - Embedded MongoDB - - Elasticsearch - - Solr - - Cassandra - - Couchbase - - Neo4j - - Gemfire - - Cloud Core-分布式核心 工具名称 说明 参考地址 Cloud Connectors - - Cloud Bootstrap - - Cloud Security - - Cloud OAuth2 - - Cloud Task - - Cloud Config-分布式配置中心 工具名称 说明 参考地址 Cloud Client - - Cloud Server - - Vault Configuration - - Zookeeper Configuration - - Consul Configuration - - Cloud Discovery-分布式服务注册 工具名称 说明 参考地址 Zookeeper Discovery - - Cloud Routing-动态数据路由 工具名称 说明 参考地址 Zuul - - Ribbon - - Feign - - Cloud Circuit Breaker-熔断器 工具名称 说明 参考地址 Hystrix - - Turbine - - Cloud Tracing-分布式追踪器 工具名称 说明 参考地址 Zipkin UI - - Zipkin Stream - - Zipkin Client - - Sleuth Stream - - Cloud Messaging-分布式消息总线 工具名称 说明 参考地址 Cloud Bus Kafka - - Cloud Bus AMQP - - Stream Binder Rabbit - - Stream Binder Kafka - - 以下省略一部分，都是些看不懂的东西。参考文献IntelliJ IDEA Spring Boot Help]]></content>
      <categories>
        <category>后端</category>
        <category>Spring 框架</category>
      </categories>
      <tags>
        <tag>Spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TILT3D-Firefox]]></title>
    <url>%2F2018%2F01%2F24%2FILT3D-Firefox%2F</url>
    <content type="text"><![CDATA[TILT 3D 效果如下 简述将网页已3D的模型展示出来。 安装 因为目前貌似有版本影响的问题，笔者用的版本为49.0.2。 菜单栏 &gt;&gt; 工具 &gt;&gt; Web开发者 &gt;&gt; 获取更多工具 查询Tilt组件，结果如下图；点击进去安装，重启FireFox即可。 菜单栏 &gt;&gt; 工具 &gt;&gt; Web开发者下找到Tilt工具，笔者是用Ctrl+Shift+M调用的。具体视情况而定。 参考文献插件地址-US插件地址-ZH]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Tilt 3D</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular-脚手架]]></title>
    <url>%2F2018%2F01%2F23%2Fngular-%E8%84%9A%E6%89%8B%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[脚手架命令 范围 命令 作用 new right-aligned 初始化新项目 Component ng g component my-new-component 新建一个组件 Directive ng g directive my-new-directive 新建一个指令 Pipe ng g pipe my-new-pipe 新建一个管道 Service ng g service my-new-service 新建一个服务 Class ng g class my-new-class 新建一个类 Interface ng g interface my-new-interface 新建一个接口 Enum ng g enum my-new-enum 新建一个枚举 Module ng g module my-module 新建一个模块 常用命令 启动服务ng serve 打包ng build 目录树详解]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular-双向数据绑定]]></title>
    <url>%2F2018%2F01%2F23%2Fngular-%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%2F</url>
    <content type="text"><![CDATA[双向数据绑定主要代码如下12# [(ngModel)]=&quot;password&quot;，使用[(ngModel)]进行绑定password属性&lt;input type=&quot;password&quot; [(ngModel)]=&quot;password&quot; value=&quot;&#123;&#123;password&#125;&#125;&quot;/&gt; [(ngModel)]是一个Angular语法，用与把password绑定到输入框中。 它的数据流是双向的：从属性到输入框，并且从输入框回到属性。不幸的是，做了这项改动之后，我们的程序崩溃了。 打开浏览器的控制台，我们会看到Angular抱怨说：“ngModel … isn’t a known property of input.”（ngModel不是input元素的已知属性）虽然NgModel是一个有效的Angular指令，但它默认情况下却是不可用的。 它属于一个可选模块FormsModule。 我们必须选择使用那个模块。 导入FormMoule模块打开app.module.ts文件，并且从@angular/forms库中导入符号FormsModule。 然后把FormsModule添加到@NgModule元数据的imports数组中，它是当前应用正在使用的外部模块列表。修改后的AppModule是这样的：123456789101112131415161718192021import &#123;BrowserModule&#125; from &apos;@angular/platform-browser&apos;;import &#123;NgModule&#125; from &apos;@angular/core&apos;;import &#123;FormsModule&#125; from &apos;@angular/forms&apos;;import &#123;AppComponent&#125; from &apos;./app.component&apos;;import &#123;UserComponent&#125; from &apos;./user/user.component&apos;;@NgModule(&#123; declarations: [ AppComponent, UserComponent ], imports: [ BrowserModule, FormsModule ], providers: [], bootstrap: [AppComponent]&#125;)export class AppModule &#123;&#125; 参考文献 FormsModule ngModel 模板语法 表单 Angular官网]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular CLI 安装和使用]]></title>
    <url>%2F2018%2F01%2F19%2FAngular-CLI-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[背景介绍 关于Angular版本，Angular官方已经统一命名Angular 1.x统称为Angular JS；Angular 2.x及以上统称Angular； CLI是Command Line Interface的简写，是一种命令行接口，实现自动化开发流程，比如：ionic cli、vue cli等；它可以创建项目、添加文件以及执行一大堆开发任务，比如测试、打包和发布。 安装Angular CLI 确认是否安装node和npm 123node -v # 6.9.4npm -v # 3.10.10// node 版本高于6.9.3 npm版本高于3.0.0 设置淘宝镜像，安装node-sass 123设置环境变量set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/npm install node-sass 安装Angular CLI 1npm install @angular/cli 验证，执行ng v命令。出现下图情况则为安装成功。 基于IDEA创建第一个AngularJS想用 创建项目,Anaular CLI选项，就是刚刚安装的。 创建的过程会下载创建一些资源如下图： 使用ng server启动服务，访问端口localhost:4200]]></content>
      <tags>
        <tag>Angular CLI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis二级缓存应用第三方（Redis）]]></title>
    <url>%2F2018%2F01%2F19%2FBatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%BA%94%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%88Redis%EF%BC%89%2F</url>
    <content type="text"><![CDATA[介绍使用mybatis时可以使用二级缓存提高查询速度，进而改善用户体验。 使用redis做mybatis的二级缓存可内存可控&lt;如将单独的服务器部署出来用于二级缓存&gt;，管理方便。 使用思路 配置redis-applicationContext.xml 设置redis服务连接各参数 在配置文件中使用标签，设置开启二级 在需要使用二级h缓存的mapper.xml中使用将cache映射到指定的MybatisRedis类中 映射类MybatisRedisCache实现MyBatis包中的Cache类，并重写其中各方法； 在重写各方法体中，使用redisFactory和redis服务建立连接，将缓存的数据加载到指定的redis内存中(putObject方法)或将redis 服务中的数据从缓存中读取出来(getObject方法)； 在redis服务中写入和加载数据时需要借用spring-data-redis.jar中JdkSerializationRedisSerializer.class中的序列化(serialize) 和反序列化方法(deserialize),此为包中封装的redis默认的序列化方法； 映射类中的各方法重写完成后即可实现mybatis数据二级缓存到redis服务中 代码实践 配置redis-applicationContext.xml mybatis-config.xml配置开启二级缓存 在mapper.xml中映射缓存类MybatisRedisCache 实现MybatisRedisCache接口 使用中间类RedisCacheTransfer解决MybatisRedisCache.jedisConnectionFactory的静态注入。]]></content>
      <tags>
        <tag>Mybatis</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题之live2d，看板娘，博客宠物]]></title>
    <url>%2F2018%2F01%2F19%2Fxt%E4%B8%BB%E9%A2%98%E4%B9%8Blive2d%EF%BC%8C%E7%9C%8B%E6%9D%BF%E5%A8%98%EF%BC%8C%E5%8D%9A%E5%AE%A2%E5%AE%A0%E7%89%A9%2F</url>
    <content type="text"><![CDATA[为博客加入看板娘，宠物效果图如下： 具体实现方法 live2d插件安装1npm install -save hexo-helper-live2d 注意：需要在项目的根目录下执行哦 然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到&lt;/body&gt;之前： 1&#123;&#123; live2d() &#125;&#125; 然后在在 hexo 的 _config.yml 中添加参数： 123live2d: model: wanko bottom: -30 如果想让宠物在移动端不显示的话再主题配置文件中加入以下代码: 1234live2d: model: wanko bottom: -30 mobileShow: false 这样就配置成功了！ live2d的详细配置解释 live2d的项目地址在这里 Settings12345678910111213141516# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: model: z16 # 展示模型的代码. 默认: z16 width: 150 # 这个模型的宽度. 默认: 150 height: 300 # 这个模型的高度. default: 300 scaling: 1 # 分辨率缩放. default: 2 opacityDefault: 0.7 # 透明度. default: 0.7 opacityHover: 1 # The opacity when hover. default: 1 mobileShow: true #是否在移动设备上显示. default: true mobileScaling: 0.5 # The scaling on mobile. default: 0.5 position: right # 模型所在网页的左边还是右边. default: right horizontalOffset: 0 # 横向偏移量. default: 0 verticalOffset: -20 # 纵向偏移量. default: -20 id: live2dcanvas # live2d元素的ID. default: live2dcanvas deviceJsSource: local # 当前设备脚本的源代码. default: local 参考文献 live2d模型预览 live2d项目地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F01%2F19%2Frkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。 列表列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 -/* 就可以了，例如： 无序列表 123- 文本1- 文本2- 文本3 有序列表 1231. 文本12. 文本23. 文本3 链接使用 [显示文本](链接地址) 这样的语法即可，例如：1[百度传送门](www.baidu.com) 图片插入![](图片链接地址)，图片链接地址可以是相对路径，绝对路径，也可以是网上的资源。 引用引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 &gt; 就好了，例如：1&gt; 引用演示 粗体和斜体Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：演示语句：我是斜体，我是粗体代码如下：123456789*我是斜体*，**我是粗体***斜体文字*_斜体文字_**加粗文字**__加粗文字__ 代码引用字段的代码用进行包裹，段落的代码用进行包裹。 表格12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 效果如下： Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitLab之IP修改]]></title>
    <url>%2F2018%2F01%2F19%2FGitLab%E4%B9%8BIP%E4%BF%AE%E6%94%B9%2F</url>
    <content type="text"><![CDATA[问题背景虚拟机的IP地址变动了，用新的IP地址直接访问虚拟的gitlab没问题，开发者的项目上修改对应的远程地址也就可以关联上了。但是出现一个问题，如下图所示：项目的下载地址还是原有的IP地址，不是现有IP地址。基于这样的问题给出以下修改。 问题解决PS:笔者用的是ubuntu的系统 进入gitlab的配置目录 1cd /opt/gitlab/embedded/service/gitlab-rails/config 用ls命令查看目录下的文件，如下图：。目录中会包含一个gitlab.yml的文件。 打开并修改相关配置，用vi gitlab.yml命令进行打开。将图中host修改成新指定的IP即可。例如我这里就将IP修改为192.168.16.182 gitlab-ctl restart重启服务即可，效果图如下：]]></content>
      <categories>
        <category>IT</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo主题之NexT]]></title>
    <url>%2F2018%2F01%2F18%2Fxo%E6%9B%BF%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%B8%BANexT%2F</url>
    <content type="text"><![CDATA[安装 下载NexT主题，下载地址请前往这里。如下图！或者点击这里直接进行下载。 将下载下来的文件解压，放到根目录下的themes文件夹下。如下图中的next下存储的就是NexT主题。 启用主题修改./_config.yml中的theme配置theme: next 添加评论功能 前往Github创建OAuth App。传送门直接新建，前提需要已经登录了。 打开如下图： Authorization callback URL这一项填写需要谨慎，一般是自己的域名，回调用的，其他随意填写。 会生成如下内容：Client ID和Client Secret 编辑主题配置文件(_config.yml)，启用评论功能： 1234567gitment: enable: true lazy: true #用一个按钮延迟加载评论。 github_user: #Github ID github_repo: #评论存储仓库 client_id: #在上一步获取的到的 client_secret: #在上一步获取的到的 效果如下： 添加打赏功能一下代码都是被注释掉，去掉注释，并且配置对应的图片的路径，图片是支付宝，微信的收款码。123reward_comment: I&apos;m not rich, but still hold the dream.wechatpay: /images/wechatpay.jpgalipay: /images/alipay.jpg 添加查询功能Local Search 安装hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 编辑站点配置文件(_config.yml)，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件(_config.yml)，启用本地搜索功能： 123# Local searchlocal_search: enable: true 添加字数统计效果如图： 安装插件，代码如下： 1npm install hexo-wordcount --save 在主题配置文件(_config.yml)中找到post_wordcount对相关参数做以下配置。 1234post_wordcount: item_text: true wordcount: true min2read: true 添加文章访问量统计之LeanCloud 前往注册，传送门 创建一个应用 进入应用，在左侧导航栏存储中创建一个Class，注意Class的名字必须是Counter，如下图。 在左侧导航栏设置中应用Key能找到App ID和App Key这两个是要填入Hexo的配置中。 修改Hexo主题配置文件，在文件中找到类似以下代码： 123456# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: 对应App ID app_key: 对应App Key 至此配置成功 文章加密 打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 12345678910&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误！&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 插入位置参考下图： 然后向指定文章插入password: password 博文静态资源压缩 插件安装，执行以下命令 12npm install gulp -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 在项目的根目录中创建gulpfile.js文件，将这里的代码拷贝到创建的gulpfile.js文件中。 生成博文是执行 hexo g &amp;&amp; gulp 问题解决Next主题标签，分类，关于界面打开出现404的情况。1.1创建标签导航 在Hexo项目的根目录下打开CMD命令执行以下命令hexo new page &quot;tags&quot; 执行结束后，会在./source文件夹下出现一个tags文件夹里面默认有一个index.md的文件，这就是我们创建的导航栏的分类页面 对index.md进行修改代码如下，重复部分忽略：1234title: 标签date: 2018-01-18 11:20:02type: &quot;tags&quot;comments: false 1.2创建分类导航 在Hexo项目的根目录下打开CMD命令执行以下命令hexo new page &quot;categories&quot; 执行结束后，会在./source文件夹下出现一个categories文件夹里面默认有一个index.md的文件，这就是我们创建的导航栏的分类页面 对index.md进行修改代码如下，重复部分忽略：1234title: 分类date: 2018-01-18 11:20:02type: &quot;categories&quot;comments: false 1.3创建关于导航 在Hexo项目的根目录下打开CMD命令执行以下命令hexo new page &quot;about&quot; 执行结束后，会在./source文件夹下出现一个about文件夹里面默认有一个index.md的文件，这就是我们创建的导航栏的分类页面 对index.md进行修改代码如下，重复部分忽略：1234title: 关于date: 2018-01-18 11:20:02type: &quot;about&quot;comments: false 参考文献 NexT官方 NexT第三方服务集成 个性化配置参考]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>NexT优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo搭建个人博客]]></title>
    <url>%2F2018%2F01%2F17%2FGitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1.拥有一个GitHub账号前往以下地址进行申请 2.创建博客仓库2.1 New respository 2.2 填写信息 标注【1】处填写github_username.github.io。 github_username用自己的用户名称代替。 点击【Create repository】创建仓库。至此github的仓库创建好了。 3.安装Hexo3.1安装Node.js Node.js官方下载地址，并且配置环境变量。 Windows环境变量配置,目前没有编写博客，后续补充。 Liunx环境变量配置,目前没有编写博客，后续补充。3.2设置npm淘宝镜像站点 npm默认源的下载速度可能很慢，建议使用淘宝镜像替换。 执行下面命令，将npm的源设置成淘宝镜像站点npm config set registry &quot;https://registry.npm.taobao.org&quot; 配置Node.js的环境变量 3.2安装Hexo 执行一下命令安装Hexo，Hexo是安装在shell打开的当前路径下的npm install hexo-cli g 初始化博客，初始化的博客是在shell打开的当前路径下创建目录hexo init blog 进入blog的主目录中cd blog 安装Hexo扩展插件npm install 安装其它插件12345678910npm install hexo-server --save# 可视化博客编辑插件npm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --save# git发布插件npm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save 至此安装完毕！！！ 4.Hexo基本使用4.1启用Hexo服务 静态页面生成hexo generate 启动本地服务hexo server 打开浏览器，地址栏中输入：[http://localhost:4000 ],应该可以看见刚刚创建的博客了 4.2问题答疑 如果出现无法访问的情况，可能是4000这个端口被占用了。解决方式，关闭服务，修改端口，再次启动服务器。相关代码如下1234# 修改端口hexo s -p 5000# 关闭服务Ctrl+C 5.将Hexo博客部署到GitHub上5.1配置 修改配置文件blog/_config.yml，修改deploy项的内容，如下所示： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 类型 type: git # 仓库的地址 repo: https://github.com/Sunshineuun/Sunshineuun.github.io.git # 分支 branch: master 注意：yml的语法要求各个标签【:】分号必须有空格。 注意：repo是对应仓库的地址，在hexo deploy的时候会提示输入密码。 5.2部署 执行以下命令： 123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy 打开网页，输入http://github_username.github.io ，打开github上托管的博客。如我的博客地址是：http://Sunshineuun.github.io。 参考文献 Hexo官网 NexT官网]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo可视化编辑]]></title>
    <url>%2F2018%2F01%2F17%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[后端管理插件hexo-admin1插件可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里，提供标签，分类配置。 1.安装123456# 安装插件npm install --save hexo-admin# 启动服务hexo server -d# 登陆地址open http://localhost:4000/admin/ 登陆查看即可]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
